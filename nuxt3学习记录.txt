node版本16.16.0   npm 版本 8.11.0

创建项目: npx nuxi@latest init my-first-nuxt3

安装依赖 npm i

启动项目 npm run dev 会生成 .nuxt 文件，是一些运行中文件

public 是公共文件

server 可以写接口

app.vue 是根组件

要使用 vant 分2步，
npm i @vant/nuxt，
在nuxt.config.ts中配置 modules: ['@vant/nuxt'] 即可，
此时，在nuxt的调试工具中，可看到modules，并且无需导入注册，
可在所有组件中使用，例如，在首页index.vue使用，
<van-button type="primary">主要按钮</van-button>

在app.vue 根组件，修改按钮主题色，在全局改css变量，用:root包起来，
也可以引入额外样式

在app.vue 根组件中 使用nuxt3自带函数 useSeoMeta

inde.vue中写网页结构，引入图片用路径 '@/assets/.....'

inde.vue中 使用nuxt3自带函数 useFetch 请求 server/api 里面的接口

inde.vue中 获取 channel 列表

inde.vue中 获取 video 列表

inde.vue中 性能优化， 初次渲染 20 条，后续滚动添加

使用 vscode 插件 json2ts 来生成 interface VideoItem

在video中创建 [id].vue 文件，用于匹配 inde.vue中的 `/video/${item.bvid}` 路径

[id].vue 中 使用nuxt3自带函数 useRoute 获取 动态参数 ${item.bvid}

[id].vue 中 模板中 用 $route.params.id 获取 动态参数 ${item.bvid}

抽离 AppHeader.vue 和 AppVideo.vue 公共组件， 知道 defineProps 的泛型写法

在server/api/video中编写 [id].get.ts 接口

在 pages/video/[id].vue 中 用 useFetch(`/api/video/${params.id}`) 调用 [id].get.ts 接口，
并用 useSeoMeta 动态设置标题，
获取推荐视频列表，并渲染，
使用弹幕组件 van-barrage，
使用粘性布局 van-sticky

在app.vue 根组件中 使用 keepalive 最大缓存 10 个页面

打包 npm run build
打包路径中不能有 中文(否则可能失败)

npm run preview 访问 http://localhost:3000/ 在线地址

如果没有代码提示， npm run postinstall 可下载类型

npm run generate 可以直接生成静态文件，不开启服务器（ 适用于 博客类 项目 ）

app.vue 的 useSeoMeta 中 添加 referrer: 'no-referrer' 绕开 B站 防盗链 加载图片